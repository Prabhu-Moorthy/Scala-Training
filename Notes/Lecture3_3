Polymorphism
------------

To understand Polymorphism in Scala we will take the example of a Cons-List.

Cons-List
---------
It is constructed from 2 building blocks.
Nil     -   Empty list.
Cons    -   A cell containing an element and a remainder of the list.

Eg.,
----
To implement a cons-list of integers we will need

trait IntList ...       ---> A base trait
class Cons(val head:Int, val tail: IntList) extends IntList ---> A class which extends the Trait IntList and
                                                                 takes as arguments the first element of the
                                                                 list which is an Int and the second element
                                                                 of the list which is a remainder of the list
                                                                 which is of type IntList.
class Nil extends IntList   --> To represent end of list.

Value/Type Parameters in classes
---------------------------------
If we notice in the above class Cons we have declared
Cons(val head:Int,val tail: IntList) in the parameter argument itself instead of doing like
Cons(_head: Int,_tail: IntList) extends IntList{
    val head = _head
    val tail = _tail
}

Declaring like the first way is also allowed in Scala

If we see the types IntList,Cons and Nil are too narrow because they get only Int types
which is not scalable. To make these types generic we have to do like

trait List[T]
class Cons[T](val head: T, val tail: List[T]) extends List[T]
class Nil[T] extends List[T]

It is not necessary to have the type parameter as T, we could have any name but
[T] is common

Type Parameters in Functions
----------------------------
Not only classes, functions can also be have type parameters

Eg.,
----
def singleton[T](elem:T) = ...

In the above example the method Singleton takes as input one element which can be of any type.
When we need to call this function we can call like

singleton[Int](1)
singleton[Boolean](false)

However since Scala is brilliant we can leave off the type definitions when calling the function
because Scala will be able to figure out that information based on the value that is passed.

We can instead make a call to this function like

singleton(1)
singleton(false)

Difference between Val and Def
------------------------------
Val is evaluated when the object is first initialized where as
Def is evaluated each time it is referenced.

Types and Evaluations(Type Erasure)
----------------------------------
The tupe parameters do not effect the evaluation in Scala.
Type parameters and type arguments are removed before evaluating the program.
This is called type erasure.

Polymorphism
------------
Since what function will be called is been based on the parameter passed, this is called polymorphism
beause the same function can be in different forms.

We have seem 2 main types of polymorphism so far.
subtyping --> Instance of a subtype can be passed to the base class<<lecture 3_1 similar to dynamic method dispatch>>
generics --> the function is identified based on the type parameter